-- üí• ‡∏•‡∏ö GUI ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
pcall(function()
	for _, gui in ipairs(game:GetService("CoreGui"):GetChildren()) do
		if gui:IsA("ScreenGui") and gui:FindFirstChild("MainFrame") then
			gui:Destroy()
		end
	end
end)

-- üî± ‡πÇ‡∏´‡∏•‡∏î Kavo UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("üåä Macro Controller", "Ocean")

-- ‚öôÔ∏è Services
local RS = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Rep = game:GetService("ReplicatedStorage")
local remotes = Rep:WaitForChild("RemoteFunctions")

-- ü™ß Notification
local function notify(msg)
	local notification = Instance.new("TextLabel")
	notification.Parent = game:GetService("CoreGui")
	notification.Size = UDim2.new(0, 320, 0, 40)
	notification.Position = UDim2.new(0.5, -160, 0.05, 0)
	notification.BackgroundColor3 = Color3.fromRGB(30, 60, 90)
	notification.TextColor3 = Color3.new(1, 1, 1)
	notification.Font = Enum.Font.GothamBold
	notification.TextSize = 18
	notification.Text = msg
	notification.Visible = true
	Instance.new("UICorner", notification)
	task.delay(3, function()
		notification:Destroy()
	end)
end

-- üß† State
local macroData, isRecording, isPlaying = {}, false, false
local autoPlayAgain, autoStart = false, false
local currentMode = "Normal"
local lastRestart, restartCooldown = 0, 8

-- üéÆ Macro Recording Hooks
local function hookRemote(name, handler)
	local old = remotes[name].InvokeServer
	remotes[name].InvokeServer = function(_, ...)
		if isRecording then handler(...) end
		return old(remotes[name], ...)
	end
end

hookRemote("PlaceUnit", function(unit, data)
	table.insert(macroData, { type = "place", unit = unit, data = data, delay = 0.3 })
end)
hookRemote("UpgradeUnit", function(unitId)
	table.insert(macroData, { type = "upgrade", unitId = unitId, delay = 0.25 })
end)
hookRemote("SellUnit", function(unitId)
	table.insert(macroData, { type = "sell", unitId = unitId, delay = 0.25 })
end)

-- üóÇÔ∏è Main Tab
local mainSec = Window:NewTab("Main"):NewSection("üéÆ Macro")

mainSec:NewButton("‚è∫Ô∏è Start Record", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏°‡πÇ‡∏Ñ‡∏£", function()
	macroData = {}
	isRecording = true
	notify("‚è∫Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
end)

mainSec:NewButton("üõë Stop Record", "‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", function()
	isRecording = false
	notify("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
end)

mainSec:NewButton("‚ñ∂Ô∏è Play Macro", "‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏°‡πÇ‡∏Ñ‡∏£", function()
	if #macroData == 0 then return notify("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡πÇ‡∏Ñ‡∏£") end
	isPlaying = true
	notify("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏°‡πÇ‡∏Ñ‡∏£")
	coroutine.wrap(function()
		for _, act in ipairs(macroData) do
			task.wait(act.delay or 0.5)
			if act.type == "place" then remotes.PlaceUnit:InvokeServer(act.unit, act.data)
			elseif act.type == "upgrade" then remotes.UpgradeUnit:InvokeServer(act.unitId)
			elseif act.type == "sell" then remotes.SellUnit:InvokeServer(act.unitId)
			end
		end
		isPlaying = false
	end)()
end)

mainSec:NewToggle("üîÅ Auto Play Again", "‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏°", function(state)
	autoPlayAgain = state
	notify("üîÅ Auto Play Again: " .. tostring(state))

	if state then
		-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Restart ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î toggle
		local success, err = pcall(function()
			game:GetService("ReplicatedStorage")
				:WaitForChild("RemoteFunctions")
				:WaitForChild("RestartGame")
				:InvokeServer()
		end)

		if success then
			notify("üîÅ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
		else
			notify("‚ö†Ô∏è ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. tostring(err))
		end

		-- üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏° loop ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
		coroutine.wrap(function()
			while autoPlayAgain do
				-- ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ logic ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥
				print("[LOOP] ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥...")
				wait(1)
			end
		end)()
	end
end)

mainSec:NewToggle("üß± Auto Select Mode", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", function(state)
	autoStart = state
	notify("üß± Auto Select Mode: " .. tostring(state))
end)

-- ‚öôÔ∏è Settings Tab
Window:NewTab("Settings"):NewSection("üéØ Difficulty")
	:NewDropdown("Mode", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°", {"dif_easy", "dif_normal", "dif_hard", "dif_insane"}, function(opt) 
		currentMode = opt
		notify("üéØ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î: " .. opt)

		local success, err = pcall(function()
			game:GetService("ReplicatedStorage")
				:WaitForChild("RemoteFunctions")
				:WaitForChild("PlaceDifficultyVote")
				:InvokeServer(opt)
		end)

		if success then
			notify("‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " .. opt)
		else
			notify("‚ö†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. tostring(err))
		end
	end)

-- üìå About Tab
Window:NewTab("About"):NewSection("üìå Created by"):NewLabel("‡πÑ‡∏≠‡∏≠‡πâ‡∏ß‡∏á x ‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á ü©µ")

-- üîÅ Auto Handler (Play Again + Vote)
RS.RenderStepped:Connect(function()
	if autoStart then
		local ok = pcall(function()
			remotes.PlaceDifficultyVote:InvokeServer("dif_" .. currentMode:lower())
		end)
		if ok then
			notify("‚úÖ ‡πÇ‡∏´‡∏ß‡∏ï‡πÇ‡∏´‡∏°‡∏î: " .. currentMode)
			autoStart = false
		end
	end

	if autoPlayAgain and tick() - lastRestart > restartCooldown then
		for _, ui in ipairs(Players.LocalPlayer.PlayerGui:GetDescendants()) do
			if ui:IsA("TextLabel") and ui.Text and ui.Text:lower():match("overwhelmed|timeout|defeat|wave lost") then
				pcall(function()
					local re = Rep:FindFirstChild("ReNotifyEvent")
					if re then
						re:FireServer("NotificationOptionSelected", nil, "Timedout")
					end
					task.wait(0.4)
					remotes.RestartGame:InvokeServer()
					lastRestart = tick()
					notify("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!")
				end)
				break
			end
		end
	end
end)

-- ‚å®Ô∏è Toggle UI
UIS.InputBegan:Connect(function(input, gp)
	if not gp and input.KeyCode == Enum.KeyCode.RightShift then
		Window:Toggle()
	end
end)
