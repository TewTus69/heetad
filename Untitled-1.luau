-- üí• ‡∏•‡∏ö GUI ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
pcall(function()
	for _, gui in ipairs(gethui():GetChildren()) do
		if gui:IsA("ScreenGui") and gui:FindFirstChild("MainFrame") then
			gui:Destroy()
		end
	end
end)

-- üî± ‡πÇ‡∏´‡∏•‡∏î Kavo UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("üåü Macro Controller", "Midnight")

-- üîß ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å
local RS = game:GetService("RunService")
local Rep = game:GetService("ReplicatedStorage")
local remotes = Rep:WaitForChild("RemoteFunctions")

local macroData = {}
local isRecording = false
local isPlaying = false
local autoPlayAgain = false
local autoStart = false
local currentMode = "Normal"

-- üìÅ ‡πÅ‡∏ó‡πá‡∏ö Main
local MainTab = Window:NewTab("Main")
local MacroSection = MainTab:NewSection("üéÆ Macro Control")

MacroSection:NewToggle("‚è∫Ô∏è Record", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏°‡πÇ‡∏Ñ‡∏£", function(state)
	isRecording = state
end)

MacroSection:NewToggle("‚ñ∂Ô∏è Play Macro", "‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏°‡πÇ‡∏Ñ‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ", function(state)
	isPlaying = state
	if state then
		coroutine.wrap(function()
			for _, act in ipairs(macroData) do
				task.wait(act.delay or 0.5)
				if act.type == "place" then
					remotes.PlaceUnit:InvokeServer(act.unit, act.data)
				elseif act.type == "upgrade" then
					remotes.UpgradeUnit:InvokeServer(act.unitId)
				elseif act.type == "sell" then
					remotes.SellUnit:InvokeServer(act.unitId)
				end
			end
		end)()
	end
end)

MacroSection:NewToggle("üîÅ Auto Play Again", "‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", function(state)
	autoPlayAgain = state
end)

MacroSection:NewToggle("üß± Auto Start Unit", "‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", function(state)
	autoStart = state
end)

-- ‚öôÔ∏è Settings
local SettingsTab = Window:NewTab("Settings")
local s = SettingsTab:NewSection("‚öôÔ∏è Difficulty")
s:NewDropdown("Select Mode", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö", {"Easy", "Normal", "Hard", "Insane"}, function(opt)
	currentMode = opt
end)

-- üìå About
local info = Window:NewTab("About"):NewSection("üìå Info")
info:NewLabel("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏≠‡∏≠‡πâ‡∏ß‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á ‚ù§Ô∏è")

-- üß† Hook Remote (Record ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á)
local oldPlace = remotes.PlaceUnit.InvokeServer
remotes.PlaceUnit.InvokeServer = function(_, unit, data)
	if isRecording then
		table.insert(macroData, {
			type = "place",
			unit = unit,
			data = data,
			delay = 0.3
		})
	end
	return oldPlace(remotes.PlaceUnit, unit, data)
end

-- Hook ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î
local oldUpgrade = remotes.UpgradeUnit.InvokeServer
remotes.UpgradeUnit.InvokeServer = function(_, unitId)
	if isRecording then
		table.insert(macroData, {
			type = "upgrade",
			unitId = unitId,
			delay = 0.2
		})
	end
	return oldUpgrade(remotes.UpgradeUnit, unitId)
end

-- Hook ‡∏Ç‡∏≤‡∏¢
local oldSell = remotes.SellUnit.InvokeServer
remotes.SellUnit.InvokeServer = function(_, unitId)
	if isRecording then
		table.insert(macroData, {
			type = "sell",
			unitId = unitId,
			delay = 0.2
		})
	end
	return oldSell(remotes.SellUnit, unitId)
end

-- üåê ‡∏£‡∏∞‡∏ö‡∏ö Auto
RS.RenderStepped:Connect(function()
	-- üéØ ‡πÇ‡∏´‡∏ß‡∏ï‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
	if autoStart then
		local success, _ = pcall(function()
			remotes.PlaceDifficultyVote:InvokeServer("dif_" .. currentMode:lower())
		end)
		if success then autoStart = false end
	end

	-- üîÅ ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏°
	if autoPlayAgain then
		for _, obj in ipairs(game:GetDescendants()) do
			if obj:IsA("TextButton") and obj.Text:lower():find("play again") then
				pcall(function() firesignal(obj.MouseButton1Click) end)
			end
		end
	end
end)

-- üéõÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î‡∏ã‡πà‡∏≠‡∏ô UI
local UIS = game:GetService("UserInputService")
UIS.InputBegan:Connect(function(input, gp)
	if not gp and input.KeyCode == Enum.KeyCode.RightShift then
		Window:Toggle()
	end
end)
